{"version":3,"sources":["components/common/FormModal/FormModal.module.scss","components/DragAndDrop/DragAndDrop.module.scss","components/List/List.module.scss","components/FormAddNewTask/FormAddNewTask.module.scss","App/App.module.scss","components/common/Button/Button.module.scss","components/Modal/Modal.module.scss","components/common/Input/Input.module.scss","components/common/Editable/Editable.module.scss","components/TaskContent/TaskContent.module.scss","reducer/task.reducer.ts","components/common/Button/Button.tsx","components/Modal/Background.tsx","components/Modal/Modal.tsx","components/common/FormModal/FormModal.tsx","components/common/Input/Input.tsx","components/common/Editable/Editable.tsx","components/FormAddNewTask/FormAddNewTask.tsx","components/TaskContent/TaskContent.tsx","components/Tasks/Tasks.tsx","components/Tasks/TasksContainer.tsx","components/List/List.tsx","components/List/ListContainer.tsx","components/DragAndDrop/DragAndDrop.tsx","components/DragAndDrop/DragAndDropContainer.tsx","App/App.tsx","store/store.ts","index.tsx"],"names":["module","exports","ACTIONS_NAME","Button","title","props","className","style","btn","Background","show","width","height","position","zIndex","left","top","backgroundColor","onClick","clicked","Modal","modalClosed","onChangeTitle","transform","opacity","children","FormModal","box","name","input","value","onChange","event","target","placeholder","bottom","trim","callback","listsKeys","initialState","tasks","id","v1","TaskACS","sourceFrom","destinationTo","type","DRAG_AND_DROP_TASK_BETWEEN_LIST","payload","sourceLocal","DRAG_AND_DROP_TASK_IN_LIST","ListId","ADD_TASK","itemID","DELETE_TASK","ADD_NEW_LIST","idList","DELETE_LIST","RENAME_LIST","Input","Editable","React","memo","useState","editMode","setEditMode","textAlign","onBlur","renameTitle","droppableIDColumn","setTitle","autoFocus","listTitle","FormAddNewTask","taskTitle","addNewTask","onChangeTaskTitle","clearForm","open","setOpen","InputHandle","inputBox","margin","alert","fontSize","color","outline","borderRadius","border","TaskContent","content","toUpperCase","Tasks","TasksTSX","list","map","task","index","draggableId","provided","snapshot","ref","innerRef","draggableProps","dragHandleProps","paddingTop","isDragging","onDoubleClick","showTaskFormContent","deleteTask","columnID","showTaskForm","handleShow","TasksContainer","setShowTaskForm","setTaskTitle","List","DroppableTSX","Object","entries","lists","droppableId","console","log","droppableProps","isDraggingOver","droppable","display","flexDirection","justifyContent","renameList","deleteList","addTask","clearTaskTitle","onDragEnd","result","ListContainer","useSelector","state","dispatch","useDispatch","onChangeListTitle","listId","setNewTitleList","destination","source","dndTaskBetweenList","dndTaskLocalList","DragAndDrop","setShow","dnd_content","add_new_list","addNewList","DragAndDropContainer","setListTitle","App","rootReducer","combineReducers","action","newTask","copyState","sourceColumn","destinationList","sourceTasks","destinationTasks","splice","removed","copyStateLocal","column","copiedTasks","remove","filter","newKey","push","lastListPosition","length","newList","copyStat3","rest","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6a179d37.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"FormModal_box__2_F3I\",\"input\":\"FormModal_input__2Bv3j\",\"bottom\":\"FormModal_bottom__11UL-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dnd_content\":\"DragAndDrop_dnd_content__3CGPc\",\"add_new_list\":\"DragAndDrop_add_new_list__rH0XM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"List_content__3Ei9d\",\"content_child_title\":\"List_content_child_title__3L7gA\",\"droppable\":\"List_droppable__3gHki\",\"item_parent\":\"List_item_parent__35L8U\",\"item_delete_child\":\"List_item_delete_child__eyZD6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"FormAddNewTask_title__2bub9\",\"inputBox\":\"FormAddNewTask_inputBox__4paLM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1JN69\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__10rEY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__32mLz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__mcpaw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listTitle\":\"Editable_listTitle__1u2Em\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"TaskContent_content__2G7yQ\"};","import {v1} from \"uuid\";\n\nimport {Destination, List, Lists, SourceFrom, TaskActionCreators} from \"./types\";\n\nlet listsKeys = ['_1', '_2', '_3'];\n\nlet initialState: Lists = {\n  [listsKeys[0]]: {\n    title: 'Todo',\n    tasks: [\n      {id: v1(), name: \"task 1\"},\n      {id: v1(), name: \"task 2\"},\n      {id: v1(), name: \"task 3\"}\n    ]\n  },\n  [listsKeys[1]]: {\n    title: 'In Progress',\n    tasks: [\n      {id: v1(), name: \"task 1\"},\n      {id: v1(), name: \"task 2\"},\n      {id: v1(), name: \"task 3\"}\n    ]\n  },\n  [listsKeys[2]]: {\n    title: 'Done',\n    tasks: []\n  },\n};\n\nexport const taskReducer = (state: Lists = initialState, action: TaskActionCreators): Lists => {\n  switch (action.type) {\n    case ACTIONS_NAME.ADD_TASK:\n      const newTask: { id: string, name: string } = {id: v1(), name: action.payload.title};\n      return {\n        ...state,\n        [action.payload.ListId]: {\n          ...state[action.payload.ListId],\n          tasks: [...state[action.payload.ListId].tasks.map(task => task), newTask]\n        }\n\n      };\n    case ACTIONS_NAME.DRAG_AND_DROP_TASK_BETWEEN_LIST:\n      const copyState = {...state};\n      const sourceColumn = copyState[action.payload.sourceFrom.droppableId];\n      const destinationList = copyState[action.payload.destinationTo.droppableId];\n      const sourceTasks = [...sourceColumn.tasks];\n      const destinationTasks = [...destinationList.tasks];\n\n      const [removed] = sourceTasks.splice(action.payload.sourceFrom.index, 1);\n\n      destinationTasks.splice(action.payload.destinationTo.index, 0, removed)\n\n      return {\n        ...state,\n        [action.payload.sourceFrom.droppableId]: {\n          ...sourceColumn,\n          tasks: sourceTasks\n        },\n        [action.payload.destinationTo.droppableId]: {\n          ...destinationList,\n          tasks: destinationTasks\n        }\n      };\n    case ACTIONS_NAME.DRAG_AND_DROP_TASK_IN_LIST:\n      const copyStateLocal = {...state};\n      const column = copyStateLocal[action.payload.sourceLocal.droppableId];\n      const copiedTasks = [...column.tasks];\n\n      const [remove] = copiedTasks.splice(action.payload.sourceLocal.index, 1);\n\n      copiedTasks.splice(action.payload.destinationTo.index, 0, remove)\n\n      return {\n        ...copyStateLocal,\n        [action.payload.sourceLocal.droppableId]: {\n          ...column,\n          tasks: copiedTasks\n        }\n      };\n    case ACTIONS_NAME.DELETE_TASK:\n      return {\n        ...state,\n        [action.payload.ListId]: {\n          ...state[action.payload.ListId],\n          tasks: [...state[action.payload.ListId].tasks.filter(task => task.id !== action.payload.itemID)]\n        }\n      };\n    case ACTIONS_NAME.ADD_NEW_LIST:\n      const newKey = v1();\n\n      listsKeys.push(`_${newKey}`);\n\n      const lastListPosition = listsKeys[listsKeys.length - 1];\n      const newList: List = {title: action.payload.title, tasks: []};\n\n      return {\n        ...state,\n        [lastListPosition]: newList\n      };\n    case ACTIONS_NAME.DELETE_LIST:\n      const copyStat3 = {...state};\n\n      const {[action.payload.idList]: {}, ...rest} = copyStat3\n\n      return rest;\n    case ACTIONS_NAME.RENAME_LIST:\n      return {\n        ...state,\n        [action.payload.idList]: {\n          ...state[action.payload.idList],\n          title: action.payload.title\n        }\n      }\n    default:\n      return state;\n  }\n}\nexport const TaskACS = {\n  dndTaskBetweenList: (sourceFrom: SourceFrom, destinationTo: Destination) => (\n    {type: ACTIONS_NAME.DRAG_AND_DROP_TASK_BETWEEN_LIST, payload: {sourceFrom, destinationTo}} as const\n  ),\n  dndTaskInList: (sourceLocal: SourceFrom, destinationTo: Destination) => (\n    {type: ACTIONS_NAME.DRAG_AND_DROP_TASK_IN_LIST, payload: {sourceLocal, destinationTo}} as const\n  ),\n  addTask: (ListId: string, title: string) => (\n    {type: ACTIONS_NAME.ADD_TASK, payload: {ListId, title,}} as const\n  ),\n  deleteTask: (ListId: string, itemID: string) => (\n    {type: ACTIONS_NAME.DELETE_TASK, payload: {ListId, itemID}} as const\n  ),\n  addNewList: (title: string) => (\n    {type: ACTIONS_NAME.ADD_NEW_LIST, payload: {title}} as const\n  ),\n  deleteList: (idList: string) => (\n    {type: ACTIONS_NAME.DELETE_LIST, payload: {idList}} as const\n  ),\n  renameList: (idList: string, title: string) => (\n    {type: ACTIONS_NAME.RENAME_LIST, payload: {idList, title}} as const\n  ),\n}\n\n//Actions-Name\nenum ACTIONS_NAME {\n  ADD_TASK = 'ADD_TASK',\n  DELETE_TASK = 'DELETE_TASK',\n  RENAME_TASK = 'RENAME_TASK',\n  DRAG_AND_DROP_TASK_BETWEEN_LIST = 'DRAG_AND_DROP_TASK_BETWEEN_LIST',\n  DRAG_AND_DROP_TASK_IN_LIST = 'DRAG_AND_DROP_TASK_IN_LIST',\n  ADD_NEW_LIST = 'ADD_NEW_LIST',\n  DELETE_LIST = 'DELETE_LIST',\n  RENAME_LIST = 'RENAME_LIST'\n}\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\n\nimport style from './Button.module.scss'\n\ninterface Props extends  DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement> {\n    title: string\n}\n\nexport const Button: React.FC<Props> = ({title ,...props}) => {\n    return <button {...props} className={style.btn}>{title}</button>\n}\n","import React, {CSSProperties} from 'react';\n\ninterface Props {\n    show: boolean,\n\n    clicked: () => void\n}\n\nexport const Background: React.FC<Props> = (props) => {\n\n    const backgroundStyle: CSSProperties = {\n        width: \"100%\",\n        height: \"100%\",\n        position: \"fixed\",\n        zIndex: 100,\n        left: \"0\",\n        top: \"0\",\n        backgroundColor: \"rgba(0, 0, 0, 0.7)\",\n    }\n\n    return props.show ? (\n        <div style={backgroundStyle} onClick={props.clicked}> </div>\n    ) : null;\n}\n","import React from 'react';\n\nimport style from './Modal.module.scss'\nimport {Background} from './Background';\n\ninterface Props {\n  show: boolean\n\n  modalClosed: () => void\n  onChangeTitle: (value: string) => void\n}\n\nexport const Modal: React.FC<Props> = (props) => {\n  const closeAndClear = () => {\n    props.modalClosed();\n    props.onChangeTitle(\"\");\n  };\n  return (\n    <>\n      <Background show={props.show} clicked={closeAndClear}/>\n      <div\n        className={style.Modal}\n        style={{\n          transform: props.show ? \"translateY(0)\" : \"translateY(-100vh)\",\n          opacity: props.show ? 1 : 0\n        }}\n      >\n        {props.children}\n      </div>\n    </>\n  )\n}\n","import React from 'react';\nimport style from './FormModal.module.scss'\nimport {Button} from \"../Button/Button\";\nimport {Input} from \"../Input/Input\";\n\nexport interface IFormModalProps  {\n    title: string\n    name: string\n\n    onChangeTitle: (value: string ) => void\n    modalClosed: () => void\n    callback: () => void\n}\n\nexport const FormModal: React.FC <IFormModalProps> = (props) => {\n\n    const onChange = (event: any) => {\n        props.onChangeTitle(event.target.value);\n    };\n\n    const cancelHandler = () => {\n        props.onChangeTitle(\"\");\n        props.modalClosed();\n    };\n\n    const create = () => {\n        if (props.title.trim() !== '') {\n            props.callback();\n            props.onChangeTitle(\"\");\n            props.modalClosed();\n        } else {\n            props.callback();\n        }\n    };\n\n\n    return (\n        <div className={style.box}>\n                <h3>{props.name}</h3>\n                <input className={style.input}\n                       value={props.title}\n                       onChange={onChange}\n                placeholder={'Please enter title new list'}\n                />\n            <div className={style.bottom}>\n                <Button onClick={cancelHandler} title={'❌'}/>\n                <Button onClick={create} title={'Create'}/>\n            </div>\n        </div>\n    )\n}\n","import React, {DetailedHTMLProps, InputHTMLAttributes} from 'react'\nimport style from './Input.module.scss'\n\ninterface Props extends DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement> {}\n\nexport const Input: React.FC<Props> = ({...props}) => {\n    return <input {...props} className={style.input} type=\"text\" />\n}\n","import React, {ChangeEvent, CSSProperties, useState} from 'react';\n\nimport {Input} from \"../Input/Input\";\nimport style from './Editable.module.scss'\n\ninterface Props {\n    title: string,\n    name?: string,\n    droppableIDColumn?: string\n\n    onChangeTitle: (event: ChangeEvent<HTMLInputElement>) => void\n    renameTitle?: (droppableIDColumn: string, title: string) => void\n    setTitle?: (title: string) => void\n}\n\nexport const Editable = React.memo((props: Props) => {\n\n    let [editMode, setEditMode] = useState<boolean>(false)\n\n    const onEditMode = () => {\n        props.setTitle!(props.name!)\n        setEditMode(true);\n    };\n    const offEditMode = () => {\n        props.renameTitle!(props.droppableIDColumn!, props.title)\n        setEditMode(false);\n        props.setTitle!('')\n    };\n\n\n\n    return (\n        <div style={{textAlign: \"left\"}}>\n            {editMode ?\n\n                <Input type=\"text\"\n                       value={props.title}\n                       onChange={props.onChangeTitle}\n                       onBlur={offEditMode}\n                       autoFocus={true}\n                />\n\n                :\n                <span className={style.listTitle} onClick={onEditMode}>{props.name}</span>\n            }\n        </div>\n    )\n})\n","import React, {ChangeEvent, useState} from 'react';\n\nimport style from './FormAddNewTask.module.scss'\nimport {Button} from \"../common/Button/Button\";\nimport {Input} from \"../common/Input/Input\";\n\ninterface Props {\n  taskTitle: string\n  droppableIDColumn?: string\n\n  onChangeTaskTitle: (event: ChangeEvent<HTMLInputElement>) => void\n  addNewTask?: (droppableIDColumn: string, title: string) => void\n  clearForm?: () => void\n}\n\n\nexport const FormAddNewTask: React.FC<Props> = (props) => {\n  const {taskTitle, droppableIDColumn, addNewTask, onChangeTaskTitle, clearForm} = props;\n\n  const [open, setOpen] = useState<boolean>(false)\n\n  function handleClick() {\n    setOpen(!open)\n  }\n\n  function addTask() {\n    if (taskTitle.trim() !== '') {\n      addNewTask!(droppableIDColumn!, taskTitle);\n      clearForm!();\n      setOpen(false)\n    } else {\n      alert('🤡 Please enter some text')\n    }\n\n  }\n\n  function closeEditMode() {\n    setOpen(false)\n    clearForm!();\n  }\n\n  const InputHandle = <div className={style.inputBox}>\n    <Input\n      type=\"text\"\n      value={taskTitle}\n      onChange={onChangeTaskTitle}\n    />\n    <div style={{margin: '0 10px'}}>\n      <Button title={'Add Card'}\n              onClick={addTask}\n      />\n      <button style={{\n        fontSize: \"22px\", color: '#FFFFFF',\n        backgroundColor: 'pink',\n        outline: \"none\",\n        borderRadius: \"4px\",\n        border: '1px solid'\n      }} onClick={closeEditMode}>{\"❌\"}</button>\n    </div>\n  </div>\n\n  return (\n    <>\n      {!open ? <span onClick={handleClick} className={style.title}>{'➕ Add other card'}</span> : InputHandle}\n    </>\n  )\n}\n","import React from 'react';\n\nimport style from './TaskContent.module.scss'\n\ninterface Props {\n  taskTitle: string\n}\n\nexport const TaskContent: React.FC<Props> = (props: Props) => {\n  const {taskTitle} = props;\n  return (\n    <div className={style.content}>\n      <span style={{fontSize: '26px'}}>{taskTitle.toUpperCase()}</span>\n    </div>\n  )\n}\n","import React from 'react';\nimport {Draggable} from \"react-beautiful-dnd\";\n\nimport {List} from \"../../reducer/types\";\nimport {TaskContent} from \"../TaskContent/TaskContent\";\nimport {Modal} from \"../Modal/Modal\";\n\ninterface Props {\n  list: List\n  columnID: string\n  showTaskForm: boolean\n  taskTitle: string\n\n  handleShow: () => void\n  deleteTask: (ColumnID: string, itemID: string) => void\n  showTaskFormContent: (title: string) => void\n}\n\nexport const Tasks: React.FC<Props> = (props: Props) => {\n\n  const TasksTSX = props.list.tasks.map((task, index) => {\n\n    return (\n      <Draggable draggableId={task.id} index={index} key={task.id}\n      >\n        {(provided, snapshot) => {\n\n          return (\n            <div\n              ref={provided.innerRef}\n              {...provided.draggableProps}\n              {...provided.dragHandleProps}\n              style={{\n                paddingTop: '10px',\n                backgroundColor: snapshot.isDragging ? '#db6299' : '#cbd881',\n                margin: '10px',\n                height: '60px',\n                borderRadius: '4px',\n                ...provided.draggableProps.style\n              }}\n              onDoubleClick={() => props.showTaskFormContent(task.name)}\n            >\n              <div className={'item_parent'}>\n                <span style={{margin: '0 10px 0 10px'}}>{task.name}</span>\n                <button\n                  onClick={() => props.deleteTask(props.columnID, task.id)}\n                  className={'item_delete_child'}>\n                  {'❌'}\n                </button>\n              </div>\n              <Modal\n                show={props.showTaskForm}\n                modalClosed={props.handleShow}\n                onChangeTitle={() => {\n                }}\n              >\n                <TaskContent taskTitle={props.taskTitle}/>\n              </Modal>\n            </div>\n          )\n        }}\n      </Draggable>\n    )\n  })\n\n  return <>{TasksTSX}</>\n}\n","import React, {useState} from 'react';\n\nimport {Tasks} from \"./Tasks\";\nimport {List} from \"../../reducer/types\";\n\ninterface Props {\n  list: List\n  columnID: string\n\n  deleteTask: (ColumnID: string, itemID: string) => void\n}\n\nexport const TasksContainer: React.FC<Props> = (props:Props) => {\n  const [showTaskForm, setShowTaskForm] = useState<boolean>(false);\n  const [taskTitle, setTaskTitle] = useState<string>('');\n\n  function handleShow() {\n    setShowTaskForm(!showTaskForm)\n  }\n\n  function showTaskFormContent(title: string) {\n    setTaskTitle(title)\n    setShowTaskForm(true)\n  }\n\n  return <Tasks list={props.list}\n                columnID={props.columnID}\n                taskTitle={taskTitle}\n                deleteTask={props.deleteTask}\n                showTaskForm={showTaskForm}\n                handleShow={handleShow}\n                showTaskFormContent={showTaskFormContent}\n  />\n}\n","import React, {ChangeEvent} from 'react';\nimport {DragDropContext, Droppable, DroppableProvided, DroppableStateSnapshot, DropResult} from \"react-beautiful-dnd\";\n\nimport style from './List.module.scss'\nimport {Editable} from \"../common/Editable/Editable\";\nimport {FormAddNewTask} from \"../FormAddNewTask/FormAddNewTask\";\nimport {Lists} from \"../../reducer/types\";\nimport {TasksContainer} from \"../Tasks/TasksContainer\";\n\ninterface Props {\n  listTitle: string\n  taskTitle: string\n  lists: Lists\n\n  deleteList: (ColumnID: string) => void,\n  onChangeTitle: (event: ChangeEvent<HTMLInputElement>) => void\n  onChangeTaskTitle: (event: ChangeEvent<HTMLInputElement>) => void\n  addTask: (ColumnID: string, title: string) => void\n  deleteTask: (ColumnID: string, itemID: string) => void\n  onDragEnd: (result: DropResult) => void\n  clearForm: () => void\n  clearTaskTitle: () => void\n  renameList: (idList: string, title: string) => void\n}\n\nexport const List: React.FC<Props> = (props) => {\n\n  const DroppableTSX = <>\n    {Object.entries(props.lists).map(([id, list]) => {\n      return (\n        <Droppable droppableId={id} key={id}>\n          {(provided: DroppableProvided, snapshot: DroppableStateSnapshot) => {\n            console.log('provided', provided.droppableProps[\"data-rbd-droppable-id\"]) //Get Id of Column\n            console.log('snapshot', snapshot)\n            return (\n              <div className={style.content}>\n                <div\n                  ref={provided.innerRef}\n                  {...provided.droppableProps}\n                  style={{\n                    backgroundColor: snapshot.isDraggingOver ? '#3ecf71' : \"#8d8d87\",\n                  }}\n                  className={style.droppable}\n                >\n                  <>\n                    <div style={{\n                      margin: '10px', position: \"relative\", textAlign: 'end',\n                      display: \"flex\", flexDirection: 'row', justifyContent: 'space-between'\n                    }}>\n                      <Editable\n                        name={list.title}\n                        droppableIDColumn={provided.droppableProps[\"data-rbd-droppable-id\"]}\n                        title={props.listTitle}\n                        onChangeTitle={props.onChangeTitle}\n                        renameTitle={props.renameList}\n                        setTitle={props.clearForm}\n                      />\n                      <button\n                        style={{height: '25px'}}\n                        onClick={() => props.deleteList(provided.droppableProps[\"data-rbd-droppable-id\"])}\n                      >{'❌'}</button>\n                    </div>\n                    <TasksContainer list={list}\n                                    columnID={provided.droppableProps[\"data-rbd-droppable-id\"]}\n                                    deleteTask={props.deleteTask}\n\n                    />\n                    {provided.placeholder}\n                    <FormAddNewTask\n                      droppableIDColumn={provided.droppableProps[\"data-rbd-droppable-id\"]}\n                      taskTitle={props.taskTitle}\n                      onChangeTaskTitle={props.onChangeTaskTitle}\n                      addNewTask={props.addTask}\n                      clearForm={props.clearTaskTitle}\n                    />\n                  </>\n                </div>\n              </div>\n            )\n          }}\n        </Droppable>\n      )\n    })}\n  </>\n\n  return (\n    <DragDropContext onDragEnd={(result) => props.onDragEnd(result)}>\n      {DroppableTSX}\n    </DragDropContext>\n  )\n}\n","import React, {ChangeEvent, useState} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../store/store\";\nimport {Destination, Lists, SourceFrom} from \"../../reducer/types\";\nimport {TaskACS} from \"../../reducer/task.reducer\";\nimport {DropResult} from \"react-beautiful-dnd\";\nimport {List} from \"./List\";\n\ninterface Props {\n  listTitle: string\n\n  setNewTitleList: (listTitle: string) => void\n  onChangeListTitle: (event: ChangeEvent<HTMLInputElement>) => void\n  clearForm: () => void\n}\n\nexport const ListContainer: React.FC<Props> = (props: Props) => {\n  const [taskTitle, setTaskTitle] = useState<string>('');\n\n  const onChangeTaskTitle = (event: ChangeEvent<HTMLInputElement>) => {\n    setTaskTitle(event.target.value)\n  }\n\n  const clearTaskTitle= () => {\n    setTaskTitle('')\n  }\n\n  const lists = useSelector<AppStateType, Lists>(state => state.Tasks);\n  const dispatch = useDispatch();\n\n  //Task\n  function dndTaskBetweenList(source: SourceFrom, destination: Destination) {\n    dispatch(TaskACS.dndTaskBetweenList(source, destination))\n  }\n\n  function dndTaskLocalList(source: SourceFrom, destination: Destination) {\n    dispatch(TaskACS.dndTaskInList(source, destination))\n  }\n\n  function addTask(listId: string, title: string) {\n    dispatch(TaskACS.addTask(listId, title))\n    // setListTitle('')\n    props.setNewTitleList('')\n  }\n\n  function deleteTask(ListId: string, itemID: string) {\n    dispatch(TaskACS.deleteTask(ListId, itemID))\n  }\n\n  function onDragEnd(result: DropResult) {\n    // console.log(\"Result\", result)\n    if (!result.destination) {\n      return;\n    }\n    //Source meaning \"from\"\n    //Destination meaning \"to\"\n    const {source, destination} = result;\n\n    if (source.droppableId !== destination!.droppableId) {\n      dndTaskBetweenList(source, destination)\n    } else {\n      dndTaskLocalList(source, destination)\n    }\n  }\n\n  function deleteList(idList: string) {\n    dispatch(TaskACS.deleteList(idList))\n  }\n\n  function renameList(idList: string, title: string) {\n    dispatch(TaskACS.renameList(idList, title))\n  }\n\n  return <List\n    listTitle={props.listTitle}\n    taskTitle={taskTitle}\n    lists={lists}\n    deleteList={deleteList}\n    onChangeTitle={props.onChangeListTitle}\n    addTask={addTask}\n    deleteTask={deleteTask}\n    onDragEnd={onDragEnd}\n    clearForm={props.clearForm}\n    renameList={renameList}\n    clearTaskTitle={clearTaskTitle}\n    onChangeTaskTitle={onChangeTaskTitle}\n  />\n}\n","import React, {ChangeEvent, CSSProperties, useState} from 'react';\n\nimport style from './DragAndDrop.module.scss'\nimport {Button} from \"../common/Button/Button\";\nimport {Modal} from \"../Modal/Modal\";\nimport {FormModal} from \"../common/FormModal/FormModal\";\nimport {ListContainer} from \"../List/ListContainer\";\n\ninterface Props {\n  listTitle: string,\n\n  onChangeListTitle: (event: ChangeEvent<HTMLInputElement>) => void\n  addNewList: () => void\n  clearForm: () => void\n  setNewTitleList: (listTitle: string) => void\n}\n\nexport const DragAndDrop: React.FC<Props> = (props) => {\n\n  const [show, setShow] = useState<boolean>(false);\n\n  function handleShow() {\n    setShow(!show)\n  }\n\n  let btnStyleAddNewColumn: CSSProperties = {\n    height: '40px',\n    fontFamily: \"sans-serif\",\n    backgroundColor: '#db71d2',\n    outline: \"none\",\n    border: '0px solid'\n  }\n\n  return (\n    <div className={style.dnd_content}>\n      <div className={style.add_new_list}>\n        <Button onClick={handleShow} title={'Add new list ➕'}/>\n      </div>\n      <ListContainer listTitle={props.listTitle}\n                     onChangeListTitle={props.onChangeListTitle}\n                     clearForm={props.clearForm}\n                     setNewTitleList={props.setNewTitleList}\n      />\n      <Modal\n        show={show}\n        modalClosed={handleShow}\n        onChangeTitle={() => {}}\n      >\n        <FormModal\n          modalClosed={handleShow}\n          name={\"Add new list\"}\n          title={props.listTitle}\n          onChangeTitle={props.clearForm}\n          callback={props.addNewList}\n        />\n      </Modal>\n    </div>\n  )\n}\n","import React, {ChangeEvent, useState} from 'react';\nimport {useDispatch} from \"react-redux\";\n\nimport {DragAndDrop} from \"./DragAndDrop\";\nimport {TaskACS} from \"../../reducer/task.reducer\";\n\nexport const DragAndDropContainer: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const [listTitle, setListTitle] = useState<string>('');\n\n  function onChangeListTitle(event: ChangeEvent<HTMLInputElement>) {\n    setListTitle(event.target.value)\n  }\n\n  function clearForm(title?: string) {\n    title && title.trim() !== '' ? setListTitle(title) : setListTitle('')\n  }\n\n  function addNewList() {\n    if (listTitle.trim() !== '') {\n      dispatch(TaskACS.addNewList(listTitle))\n    } else {\n      alert('Field should be required')\n    }\n  }\n\n  return <DragAndDrop\n    listTitle={listTitle}\n    setNewTitleList={setListTitle}\n    onChangeListTitle={onChangeListTitle}\n    addNewList={addNewList}\n    clearForm={clearForm}\n  />\n}\n","import React from 'react';\n\nimport style from './App.module.scss';\nimport {DragAndDropContainer} from \"../components/DragAndDrop/DragAndDropContainer\";\n\n\nexport const App: React.FC = () => {\n    return (\n        <div className={style.App}>\n           <DragAndDropContainer />\n        </div>\n    );\n}\n\n","import {combineReducers, createStore} from \"redux\";\nimport {taskReducer} from \"../reducer/task.reducer\";\n\nconst rootReducer = combineReducers({\n    Tasks: taskReducer\n})\n\nexport const store = createStore(rootReducer)\n\nexport type AppStateType = ReturnType<typeof rootReducer>\n\n//Smart type\nexport type inferType<T> = T extends { [key: string]: (...arg: any[]) => infer U } ? U : never\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from \"react-redux\";\n\nimport {App} from \"./App/App\";\nimport {store} from './store/store';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      < App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}